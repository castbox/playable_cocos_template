CCEffect %{
techniques:
  - passes:
      - vert: sprite-vs:vert
        frag: sprite-fs:frag
        depthStencilState:
          depthTest: false
          depthWrite: false
        blendState:
          targets:
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        rasterizerState:
          cullMode: none
        properties:
          alphaThreshold: { value: 0.5 }
          _WeightR:
            {
              value: 0.299,
              editor: { displayName: "Weight Red", type: float, range: [0, 1] },
            }
          _WeightG:
            {
              value: 0.587,
              editor:
                { displayName: "Weight Green", type: float, range: [0, 1] },
            }
          _WeightB:
            {
              value: 0.114,
              editor:
                { displayName: "Weight Blue", type: float, range: [0, 1] },
            }
          _LuminanceMin:
            {
              value: 0.0,
              editor:
                { displayName: "Luminance Min", type: float, range: [0, 1] },
            }
          _LuminanceMax:
            {
              value: 1.0,
              editor:
                { displayName: "Luminance Max", type: float, range: [0, 1] },
            }

}%

CCProgram sprite-vs %{
precision highp float;
#include <builtin/uniforms/cc-global>
#if USE_LOCAL
  #include <builtin/uniforms/cc-local>
#endif

in vec3 a_position;
in vec2 a_texCoord;
in vec4 a_color;

out vec4 v_light;
out vec2 uv0;

#if TWO_COLORED
  in vec4 a_color2;
  out vec4 v_dark;
#endif

vec4 vert() {
  vec4 pos = vec4(a_position, 1);
  
  #if USE_LOCAL
    pos = cc_matWorld * pos;
  #endif
  
  pos = cc_matViewProj * pos;
  
  uv0 = a_texCoord;
  
  v_light = a_color;
  #if TWO_COLORED
    v_dark = a_color2;
  #endif
  
  return pos;
}
}%

CCProgram sprite-fs %{
precision highp float;
#include <builtin/internal/alpha-test>

in vec4 v_light;
#if TWO_COLORED
  in vec4 v_dark;
#endif
in vec2 uv0;
#pragma builtin(local)
layout(set = 2, binding = 12)uniform sampler2D cc_spriteTexture;

uniform Constants {
  float _WeightR;
  float _WeightG;
  float _WeightB;
  float _LuminanceMin;
  float _LuminanceMax;
};

vec4 frag() {
  vec4 col = texture(cc_spriteTexture, uv0);
  #if TWO_COLORED
    col.a = col.a * v_light.a;
    col.rgb = ((col.a - 1.0) * v_dark.a + 1.0 - col.rgb) * v_dark.rgb + col.rgb * v_light.rgb;
  #else
    col *= v_light;
  #endif
  
  float luminance = col.r * _WeightR + col.g * _WeightG + col.b * _WeightB;
  luminance = smoothstep(_LuminanceMin, _LuminanceMax, luminance);
  
  col.rgb = vec3(luminance);
  
  ALPHA_TEST(col);
  return col;
}
}%
